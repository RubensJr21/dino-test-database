CREATE TABLE "category" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "code" text NOT NULL
);

CREATE TABLE "transfer_method" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "code" text NOT NULL
);

CREATE TABLE "transaction_instrument" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "fk_id_transfer_method" integer NOT NULL,
  "fk_id_bank_account" integer,
  "is_enabled" bool NOT NULL DEFAULT 'true',
  "nickname" text
);

CREATE TABLE "base_transaction_type" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "description" text NOT NULL,
  "cashflow_type" integer NOT NULL,
  "fk_id_transaction_instrument" integer NOT NULL,
  "fk_id_category" integer NOT NULL
);

CREATE TABLE "item_value" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "scheduled_at" date NOT NULL,
  "amount" integer NOT NULL,
  "was_processed" boolean NOT NULL DEFAULT false
);

CREATE TABLE "standard" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "fk_id_item_value" integer NOT NULL
);

CREATE TABLE "recurrence_type" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "code" text UNIQUE NOT NULL
);

CREATE TABLE "recurring" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "start_date" date NOT NULL,
  "end_date" date,
  "current_amount" integer NOT NULL,
  "fk_id_recurrence_type" integer NOT NULL
);

CREATE TABLE "recurring_item_value" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "fk_id_recurring" integer NOT NULL,
  "fk_id_item_value" integer NOT NULL
);

CREATE TABLE "installment" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "start_date" date NOT NULL,
  "installments_number" integer NOT NULL,
  "total_amount" integer NOT NULL
);

CREATE TABLE "installment_item_value" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "fk_id_installment" integer NOT NULL,
  "fk_id_item_value" integer NOT NULL
);

CREATE TABLE "bank_account" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "nickname" text NOT NULL
);

CREATE TABLE "balance_bank" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "fk_id_bank_account" integer NOT NULL,
  "opening_balance" date NOT NULL,
  "closing_balance" date NOT NULL,
  "current_amount" integer NOT NULL
);

CREATE TABLE "balance_cash" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "opening_balance" date NOT NULL,
  "closing_balance" date NOT NULL,
  "current_amount" integer NOT NULL
);

COMMENT ON COLUMN "category"."code" IS 'education, health, entertainment, food, housing,    transportation, services, shopping, taxes, others';

COMMENT ON TABLE "transfer_method" IS 'Semelhante a um atributo type';

COMMENT ON COLUMN "transfer_method"."code" IS '[pix, debit, cash]';

COMMENT ON COLUMN "transaction_instrument"."nickname" IS 'Nome amigável, ex: ''Pix Nubank'', Dinheiro';

COMMENT ON COLUMN "item_value"."amount" IS 'Guardado em centavos para garantir que o cálculo    será feito corretamente';

COMMENT ON COLUMN "item_value"."was_processed" IS 'Indica se a transferência já foi executada
Se um recebimento foi recebido e se um pagamento foi pago
';

COMMENT ON COLUMN "recurrence_type"."code" IS '[monthly, yearly]';

COMMENT ON COLUMN "recurring"."id" IS 'Com isso ao buscar uma transação eu consigo ''linkar''    com o tipo especializado';

COMMENT ON COLUMN "recurring"."current_amount" IS 'Guardado em centavos';

COMMENT ON COLUMN "installment"."total_amount" IS 'Guardado em centavos';

COMMENT ON COLUMN "balance_bank"."current_amount" IS 'Guardado em centavos';

COMMENT ON COLUMN "balance_cash"."current_amount" IS 'Guardado em centavos';

ALTER TABLE "transaction_instrument" ADD FOREIGN KEY ("fk_id_transfer_method") REFERENCES "transfer_method" ("id");

ALTER TABLE "transaction_instrument" ADD FOREIGN KEY ("fk_id_bank_account") REFERENCES "bank_account" ("id");

ALTER TABLE "base_transaction_type" ADD FOREIGN KEY ("fk_id_transaction_instrument") REFERENCES "transaction_instrument" ("id");

ALTER TABLE "base_transaction_type" ADD FOREIGN KEY ("fk_id_category") REFERENCES "category" ("id");

ALTER TABLE "standard" ADD FOREIGN KEY ("id") REFERENCES "base_transaction_type" ("id");

ALTER TABLE "standard" ADD FOREIGN KEY ("fk_id_item_value") REFERENCES "item_value" ("id");

ALTER TABLE "recurring" ADD FOREIGN KEY ("id") REFERENCES "base_transaction_type" ("id");

ALTER TABLE "recurring" ADD FOREIGN KEY ("fk_id_recurrence_type") REFERENCES "recurrence_type" ("id");

ALTER TABLE "recurring_item_value" ADD FOREIGN KEY ("fk_id_recurring") REFERENCES "recurring" ("id");

ALTER TABLE "recurring_item_value" ADD FOREIGN KEY ("fk_id_item_value") REFERENCES "item_value" ("id");

ALTER TABLE "installment" ADD FOREIGN KEY ("id") REFERENCES "base_transaction_type" ("id");

ALTER TABLE "installment_item_value" ADD FOREIGN KEY ("fk_id_installment") REFERENCES "installment" ("id");

ALTER TABLE "installment_item_value" ADD FOREIGN KEY ("fk_id_item_value") REFERENCES "item_value" ("id");

ALTER TABLE "balance_bank" ADD FOREIGN KEY ("fk_id_bank_account") REFERENCES "bank_account" ("id");
